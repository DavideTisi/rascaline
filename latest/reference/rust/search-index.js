var searchIndex = JSON.parse('{\
"equistore":{"doc":"","t":[12,8,3,13,6,3,4,13,13,13,13,2,2,2,13,3,3,2,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,10,11,11,10,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,0,0,10,11,11,11,11,11,11,11,10,11,11,12,12,12,5,10,11,11,12,10,11,11,11,10,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,5,5,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","Array","BasicBlock","BufferSize","DataOrigin","EmptyArray","Error","External","Internal","InvalidParameter","Io","LabelValue","Labels","LabelsBuilder","Serialization","TensorBlock","TensorBlockRefMut","TensorMap","add_gradient","as_any","as_any","as_any_mut","as_any_mut","as_array","as_array_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","components","copy","copy","create","create","create","data","data","data","data","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eqs_array_t","eqs_data_origin_t","eqs_sample_mapping_t","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","get_data_origin","gradient","gradient","gradient_mut","gradient_parameters_c","gradients","gradients","gradients_mut","init","init","init","init","init","init","init","init","input","into","into","into","into","into","into","into","into","io","labels","move_samples_from","move_samples_from","move_samples_from","ne","new","new","new","new","origin","origin","origin","output","properties","ptr","register_data_origin","reshape","reshape","reshape","samples","shape","shape","shape","source","swap_axes","swap_axes","swap_axes","tensor","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values","values_mut","values_mut","0","0","0","0","0","context","status","load","save","FixedSizeIter","Iter","LabelValue","Labels","LabelsBuilder","ParIter","add","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c_names","clone","clone","clone_into","clone_into","cmp","contains","contains","count","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drive","drive_unindexed","drop","drop","drop","drop","drop","drop","eq","eq","eq","equivalent","finish","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_hash","hash","i32","index","init","init","init","init","init","init","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_par_iter","is_valid_label_name","isize","iter","iter_fixed_size","len","len","len","names","ne","ne","new","new","next","next","par_iter","partial_cmp","position","reserve","single","size","size","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","usize","with_producer","Iter","IterMut","ParIter","ParIterMut","TensorMap","block","block_matching","block_mut","blocks","blocks_matching","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","components_to_properties","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drive","drive","drive_unindexed","drive_unindexed","drop","drop","drop","drop","drop","fmt","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","into_iter","into_iter","into_par_iter","into_par_iter","iter","iter_mut","keys","keys_to_properties","keys_to_samples","len","len","len","len","new","next","next","par_iter","par_iter_mut","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","with_producer","with_producer"],"q":["equistoreequistore::Error","","","","","","","equistore::io","","equistore::labels","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","equistore::tensor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","A rust trait with the same interface as <code>eqs_array_t</code>, see …","Basic building block for <code>TensorMap</code>. A single basic block …","A buffer passed to a C API function does not have the …","","An implementation of the <code>Array</code> trait without any data. …","The possible sources of error in equistore","External error, coming from a function used as a callback …","Any other internal error, usually these are internal bugs.","A function got an invalid parameter","I/O error when loading/writing <code>TensorMap</code> to a file","","","","Serialization format error when loading/writing <code>TensorMap</code> …","A single block in a <code>TensorMap</code>, containing both values &amp; …","Alternative to <code>&amp;mut TensorBlock</code> allowing mutable access to …","","Add a gradient with respect to <code>parameter</code> to this block.","","","","","Get the data in this <code>eqs_array_t</code> as a <code>ndarray::ArrayD</code>. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new array with the same settings as this one and …","","","Get the underlying data for this array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>eqs_array_t</code> manages n-dimensional arrays used as data in a …","A single 64-bit integer representing a data origin (numpy …","Representation of a single sample moved from an array to …","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Get the name of the given (pre-registered) origin","Get the data and metadata for the gradient with respect to …","Get the data and metadata for the gradient with respect to …","Get read-write access to the data and metadata for the …","Get the list of gradients in this block for the C API","Get all gradients defined in this block","Get all gradients defined in this block","Get an iterator over all gradients defined in this block, …","","","","","","","","","index of the moved sample in the input array","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Set entries in <code>self</code> (the current array) taking data from …","","","Create an <code>eqs_array_t</code> from a Rust implementation of the …","Create a new <code>EmptyArray</code> with the given shape.","Create a new <code>BasicBlock</code>, validating the shape of data &amp; …","Create a new <code>TensorBlock</code> containing the given data, …","","Get the origin of this array","","index of the moved sample in the output array","","User-provided data should be stored here, it will be …","Register a new data origin with the given <code>name</code>, or get the …","","Set the shape of this array to the given new <code>shape</code>","","","","Get the shape of this array","","","","Swap the axes <code>axis_1</code> and <code>axis_2</code> in the dimensions of this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the values data and metadata in this block","Get the values data and metadata in this block","Get read-write access to the values data and metadata in …","Get read-write access to the values data and metadata in …","","","","","","","","","","Iterator over entries in a set of <code>Labels</code> as fixed size …","iterator over <code>Labels</code> entries","A single value inside a label. This is represented as a …","A set of labels used to carry metadata associated with a …","Builder for <code>Labels</code>, this should be used to construct <code>Labels</code>…","Parallel iterator over entries in a set of <code>Labels</code>","Add a single <code>entry</code> to this set of labels.","","","","","","","","","","","","","Get the names of the entries/columns in this set of labels …","","","","","","Check if this <code>LabelBuilder</code> already contains the given <code>label</code>","Check whether the given <code>label</code> is part of this set of labels","Get the total number of entries in this set of labels","","","","","","","","","","","","","","","","","","","","","","","","","Finish building the <code>Labels</code>","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Get the integer value of this <code>LabelValue</code> as an i32","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Check if the given name is a valid identifier, to be used …","Get the integer value of this <code>LabelValue</code> as an isize","Iterate over the entries in this set of labels","Iterate over the entries in this set of labels as …","","","","Get the names of the entries/columns in this set of labels","","","Create a new empty <code>LabelsBuilder</code> with the given <code>names</code>","Create a <code>LabelValue</code> with the given <code>value</code>","","","Iterate over the entries in this set of labels in parallel","","Get the position (i.e. row index) of the given label in …","Reserve space for <code>additional</code> other entries in the labels.","Create a set of <code>Labels</code> containing a single entry, to be …","Get the number of labels in a single value","Get the number of entries/named values in a single label","","","","","","","","","","","","","","","","","","","","","","Get the integer value of this <code>LabelValue</code> as a usize","","Iterator over key/block pairs in a <code>TensorMap</code>","Iterator over key/block pairs in a <code>TensorMap</code>, with mutable …","Parallel iterator over key/block pairs in a <code>TensorMap</code>","Parallel iterator over key/block pairs in a <code>TensorMap</code>, …","A tensor map is the main user-facing struct of this …","Get a reference to the block matching the given selection.","Get the index of the single block matching the given …","Get read-write access to the block at the given index in …","Get the list of blocks in this <code>TensorMap</code>","Get the index of blocks matching the given selection.","","","","","","","","","","","","","Move the given variables from the component labels to the …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Get an iterator over the keys and associated blocks","Get an iterator over the keys and associated blocks, with …","Get the keys defined in this <code>TensorMap</code>","Merge blocks with the same value for selected keys …","Merge blocks with the same value for selected keys …","","","","","Create a new <code>TensorMap</code> with the given keys and blocks.","","","Get a parallel iterator over the keys and associated blocks","Get a parallel iterator over the keys and associated …","","","","","","","","","","","","","","","","","",""],"i":[1,0,0,2,0,0,0,2,2,2,2,0,0,0,2,0,0,0,3,4,5,4,5,6,6,6,5,7,1,8,9,3,2,6,5,7,1,8,9,3,2,6,1,8,9,3,6,1,8,9,3,9,4,5,4,6,5,4,6,5,9,6,5,7,7,1,8,9,3,2,6,5,7,1,8,9,3,2,6,6,5,7,1,8,9,3,2,1,0,0,0,1,6,1,8,9,3,2,2,6,6,5,7,1,8,9,3,2,2,2,0,7,3,7,3,7,3,7,6,5,7,1,8,9,3,2,8,6,5,7,1,8,9,3,2,0,0,4,6,5,1,6,5,9,3,4,6,5,8,9,6,0,4,6,5,9,4,6,5,2,4,6,5,0,6,1,8,9,3,2,6,5,7,1,8,9,3,2,6,5,7,1,8,9,3,2,6,5,7,1,8,9,3,2,7,3,7,3,10,11,12,13,14,15,15,0,0,0,0,0,0,0,0,16,16,17,18,19,20,21,16,17,18,19,20,21,21,20,21,20,21,20,16,21,21,16,17,18,19,20,21,16,17,18,19,20,21,18,18,16,17,18,19,20,21,20,20,21,20,16,20,20,21,16,17,18,19,20,20,20,20,20,21,20,20,20,21,16,17,18,19,20,21,16,17,18,19,20,21,17,19,21,18,0,20,21,21,17,18,19,21,20,21,16,20,17,19,21,20,21,16,21,16,21,20,21,20,16,17,18,19,20,21,16,17,18,19,20,21,16,17,18,19,20,21,20,18,0,0,0,0,0,22,22,22,22,22,23,24,25,26,22,23,24,25,26,22,22,22,22,23,24,25,26,22,23,24,25,26,22,25,26,25,26,23,24,25,26,22,22,23,24,25,26,22,23,24,25,26,22,23,24,25,26,22,23,24,25,26,22,22,22,22,22,23,24,25,26,22,23,24,22,22,22,23,24,25,26,22,23,24,25,26,22,23,24,25,26,22,25,26],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["tensorblock",3],["str",0],["into",8,[["eqs_array_t",3]]],["arc",3,[["labels",3]]],["vec",3,[["arc",3,[["labels",3]]]]]],["result",4,[["error",4]]]],[[["",0]],["any",8]],[[["emptyarray",3]],["any",8]],[[["",0]],["any",8]],[[["emptyarray",3]],["any",8]],[[["eqs_array_t",3]],["arrayd",6]],[[["eqs_array_t",3]],["arrayd",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["eqs_array_t",3]],["eqs_array_t",3]],[[["eqs_data_origin_t",3]],["eqs_data_origin_t",3]],[[["eqs_sample_mapping_t",3]],["eqs_sample_mapping_t",3]],[[["basicblock",3]],["basicblock",3]],[[["tensorblock",3]],["tensorblock",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[["",0]],["box",3,[["array",8]]]],[[["emptyarray",3]],["box",3,[["array",8]]]],[[["",0]],["box",3,[["array",8]]]],[[["eqs_array_t",3]],["result",4,[["eqs_array_t",3],["error",4]]]],[[["emptyarray",3]],["box",3,[["array",8]]]],[[["",0]]],[[["eqs_array_t",3]],["result",4,[["error",4]]]],[[["emptyarray",3]]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["tensorblockrefmut",3]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["eqs_array_t",3]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["eqs_data_origin_t",3],["eqs_data_origin_t",3]],["bool",0]],null,null,null,[[["",0],["",0]],["bool",0]],[[["eqs_array_t",3],["formatter",3]],["result",6]],[[["eqs_data_origin_t",3],["formatter",3]],["result",6]],[[["eqs_sample_mapping_t",3],["formatter",3]],["result",6]],[[["basicblock",3],["formatter",3]],["result",6]],[[["tensorblock",3],["formatter",3]],["result",6]],[[["error",4],["formatter",3]],["result",6]],[[["error",4],["formatter",3]],["result",6]],[[]],[[["array",8]],["eqs_array_t",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["error",3]],["error",4]],[[]],[[["box",3,[["any",8]]]],["error",4]],[[["dataorigin",6]],["string",3]],[[["tensorblockrefmut",3],["str",0]],["option",4,[["basicblock",3]]]],[[["tensorblock",3],["str",0]],["option",4,[["basicblock",3]]]],[[["tensorblockrefmut",3],["str",0]],["option",4,[["basicblock",3]]]],[[["tensorblock",3]]],[[["tensorblockrefmut",3]],["hashmap",3]],[[["tensorblock",3]],["hashmap",3]],[[["tensorblockrefmut",3]],["iterator",8]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["",0],["array",8],["range",3,[["usize",0]]]]],[[["eqs_array_t",3],["eqs_array_t",3],["range",3,[["usize",0]]]],["result",4,[["error",4]]]],[[["emptyarray",3],["array",8],["range",3,[["usize",0]]]]],[[["eqs_data_origin_t",3],["eqs_data_origin_t",3]],["bool",0]],[[["box",3,[["array",8]]]],["eqs_array_t",3]],[[["vec",3,[["usize",0]]]],["emptyarray",3]],[[["eqs_array_t",3],["arc",3,[["labels",3]]],["vec",3,[["arc",3,[["labels",3]]]]],["arc",3,[["labels",3]]]],["result",4,[["basicblock",3],["error",4]]]],[[["into",8,[["eqs_array_t",3]]],["arc",3,[["labels",3]]],["vec",3,[["arc",3,[["labels",3]]]]],["arc",3,[["labels",3]]]],["result",4,[["tensorblock",3],["error",4]]]],[[["",0]],["dataorigin",6]],[[["eqs_array_t",3]],["result",4,[["eqs_data_origin_t",3],["error",4]]]],[[["emptyarray",3]],["dataorigin",6]],null,null,null,[[["string",3]],["dataorigin",6]],[[["",0]]],[[["eqs_array_t",3]],["result",4,[["error",4]]]],[[["emptyarray",3]]],null,[[["",0]]],[[["eqs_array_t",3]],["result",4,[["error",4]]]],[[["emptyarray",3]]],[[["error",4]],["option",4,[["error",8]]]],[[["",0],["usize",0],["usize",0]]],[[["eqs_array_t",3],["usize",0],["usize",0]],["result",4,[["error",4]]]],[[["emptyarray",3],["usize",0],["usize",0]]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["tensorblockrefmut",3]],["basicblock",3]],[[["tensorblock",3]],["basicblock",3]],[[["tensorblockrefmut",3]],["basicblock",3]],[[["tensorblock",3]],["basicblock",3]],null,null,null,null,null,null,null,[[["",26,[["read",8],["seek",8]]]],["result",4,[["tensormap",3],["error",4]]]],[[["",26,[["write",8],["seek",8]]],["tensormap",3]],["result",4,[["error",4]]]],null,null,null,null,null,null,[[["labelsbuilder",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["labels",3]]],[[["labelvalue",3]],["labelvalue",3]],[[["labels",3]],["labels",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["labelvalue",3],["labelvalue",3]],["ordering",4]],[[["labelsbuilder",3]],["bool",0]],[[["labels",3]],["bool",0]],[[["labels",3]],["usize",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["pariter",3],["consumer",8]]],[[["pariter",3]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["labelvalue",3],["i32",0]],["bool",0]],[[["labelvalue",3],["labelvalue",3]],["bool",0]],[[["labels",3],["labels",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["labelsbuilder",3]],["labels",3]],[[["labelvalue",3],["formatter",3]],["result",6]],[[["labelvalue",3],["formatter",3]],["result",6]],[[["labels",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["usize",0]],["labelvalue",3]],[[["isize",0]],["labelvalue",3]],[[["i32",0]],["labelvalue",3]],[[]],[[["u32",0]],["labelvalue",3]],[[]],[[["",0],["",0]],["u64",0]],[[["labelvalue",3],["",0]]],[[["labelvalue",3]],["i32",0]],[[["labels",3],["usize",0]]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["labels",3]]],[[]],[[["str",0]],["bool",0]],[[["labelvalue",3]],["isize",0]],[[["labels",3]],["iter",3]],[[["labels",3]],["fixedsizeiter",3]],[[["iter",3]],["usize",0]],[[["pariter",3]],["usize",0]],[[["fixedsizeiter",3]],["usize",0]],[[["labels",3]],["vec",3,[["str",0]]]],[[["labelvalue",3],["labelvalue",3]],["bool",0]],[[["labels",3],["labels",3]],["bool",0]],[[["vec",3,[["str",0]]]],["labelsbuilder",3]],[[["i32",0]],["labelvalue",3]],[[["iter",3]],["option",4]],[[["fixedsizeiter",3]],["option",4]],[[["labels",3]],["pariter",3]],[[["labelvalue",3],["labelvalue",3]],["option",4,[["ordering",4]]]],[[["labels",3]],["option",4,[["usize",0]]]],[[["labelsbuilder",3],["usize",0]]],[[],["labels",3]],[[["labelsbuilder",3]],["usize",0]],[[["labels",3]],["usize",0]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["labelvalue",3]],["usize",0]],[[["pariter",3],["producercallback",8]]],null,null,null,null,null,[[["tensormap",3],["labels",3]],["result",4,[["tensorblock",3],["error",4]]]],[[["tensormap",3],["labels",3]],["result",4,[["usize",0],["error",4]]]],[[["tensormap",3],["usize",0]],["tensorblockrefmut",3]],[[["tensormap",3]]],[[["tensormap",3],["labels",3]],["result",4,[["vec",3,[["usize",0]]],["error",4]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["tensormap",3]],["tensormap",3]],[[["",0],["",0]]],[[["tensormap",3]],["result",4,[["error",4]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["pariter",3],["consumer",8]]],[[["paritermut",3],["consumer",8]]],[[["pariter",3]]],[[["paritermut",3]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["tensormap",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["tensormap",3]],["iter",3]],[[["tensormap",3]],["itermut",3]],[[["tensormap",3]],["labels",3]],[[["tensormap",3],["labels",3],["bool",0]],["result",4,[["error",4]]]],[[["tensormap",3],["labels",3],["bool",0]],["result",4,[["error",4]]]],[[["iter",3]],["usize",0]],[[["itermut",3]],["usize",0]],[[["pariter",3]],["usize",0]],[[["paritermut",3]],["usize",0]],[[["labels",3],["vec",3,[["tensorblock",3]]]],["result",4,[["tensormap",3],["error",4]]]],[[["iter",3]],["option",4]],[[["itermut",3]],["option",4]],[[["tensormap",3]],["pariter",3]],[[["tensormap",3]],["paritermut",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["pariter",3],["producercallback",8]]],[[["paritermut",3],["producercallback",8]]]],"p":[[3,"eqs_data_origin_t"],[4,"Error"],[3,"TensorBlock"],[8,"Array"],[3,"EmptyArray"],[3,"eqs_array_t"],[3,"TensorBlockRefMut"],[3,"eqs_sample_mapping_t"],[3,"BasicBlock"],[13,"InvalidParameter"],[13,"BufferSize"],[13,"Io"],[13,"Serialization"],[13,"Internal"],[13,"External"],[3,"LabelsBuilder"],[3,"Iter"],[3,"ParIter"],[3,"FixedSizeIter"],[3,"LabelValue"],[3,"Labels"],[3,"TensorMap"],[3,"Iter"],[3,"IterMut"],[3,"ParIter"],[3,"ParIterMut"]]},\
"rascaline":{"doc":"","t":[13,13,3,3,13,4,13,13,13,13,4,13,13,3,13,2,13,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,0,11,11,11,12,12,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,12,12,12,12,12,12,12,12,8,3,3,3,3,3,3,3,11,12,12,12,11,11,12,12,12,11,11,10,11,10,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,10,11,12,12,12,12,12,10,11,10,11,10,11,10,11,10,11,12,12,12,12,12,12,10,11,10,11,11,11,0,10,11,11,11,11,11,4,13,3,3,3,3,13,3,4,8,4,3,13,3,3,3,3,3,3,13,3,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,13,13,3,3,3,3,8,13,8,13,4,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,10,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,3,3,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,12,10,11,10,11,5,12,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["All","BufferSize","CalculationOptions","Calculator","Chemfiles","Error","External","Internal","InvalidParameter","Json","LabelsSelection","Predefined","Serialization","SimpleSystem","Subset","System","Utf8","__clone_box","__clone_box","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculators","clone","clone","clone_into","clone_into","compute","default","default_keys","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","gradients","init","init","init","init","into","into","into","into","labels","name","new","parameters","selected_properties","selected_samples","source","systems","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","types","use_native_system","0","0","0","0","0","0","0","message","status","0","0","CalculatorBase","PowerSpectrumParameters","RadialSpectrumParameters","SoapPowerSpectrum","SoapRadialSpectrum","SortedDistances","SphericalExpansion","SphericalExpansionParameters","__clone_box","atomic_gaussian_width","atomic_gaussian_width","atomic_gaussian_width","borrow","borrow_mut","center_atom_weight","center_atom_weight","center_atom_weight","clone","clone_into","components","components","compute","compute","cutoff","cutoff","cutoff","cutoff_function","cutoff_function","cutoff_function","deref","deref_mut","deserialize","drop","fmt","from","init","into","json_schema","keys","keys","max_angular","max_angular","max_radial","max_radial","max_radial","name","name","parameters","parameters","positions_gradient_samples","positions_gradient_samples","properties","properties","properties_names","properties_names","radial_basis","radial_basis","radial_basis","radial_scaling","radial_scaling","radial_scaling","samples","samples","samples_names","samples_names","schema_name","serialize","soap","supports_gradient","supports_gradient","to_owned","try_from","try_into","type_id","CutoffFunction","Gto","GtoParameters","GtoRadialIntegral","HyperGeometricParameters","HyperGeometricSphericalExpansion","None","PowerSpectrumParameters","RadialBasis","RadialIntegral","RadialScaling","RadialSpectrumParameters","ShiftedCosine","SoapPowerSpectrum","SoapRadialSpectrum","SphericalExpansion","SphericalExpansionParameters","SphericalHarmonics","SphericalHarmonicsArray","SplinedGto","SplinedRIParameters","SplinedRadialIntegral","Step","Willatt2018","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","atomic_gaussian_constant","atomic_gaussian_width","atomic_gaussian_width","atomic_gaussian_width","atomic_gaussian_width","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","center_atom_weight","center_atom_weight","center_atom_weight","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","components","components","components","compute","compute","compute","compute","compute","compute","compute","compute","compute","compute","cutoff","cutoff","cutoff","cutoff","cutoff","cutoff_function","cutoff_function","cutoff_function","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","derivative","derivative","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gto_gaussian_constants","index","index_mut","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","json_schema","json_schema","json_schema","json_schema","json_schema","json_schema","keys","keys","keys","max_angular","max_angular","max_angular","max_angular","max_radial","max_radial","max_radial","max_radial","max_radial","name","name","name","new","new","new","new","new","new","new","parameters","parameters","parameters","positions_gradient_samples","positions_gradient_samples","positions_gradient_samples","properties","properties","properties","properties_names","properties_names","properties_names","radial_basis","radial_basis","radial_basis","radial_scaling","radial_scaling","radial_scaling","samples","samples","samples","samples_names","samples_names","samples_names","schema_name","schema_name","schema_name","schema_name","schema_name","schema_name","serialize","serialize","serialize","serialize","serialize","serialize","slice","supports_gradient","supports_gradient","supports_gradient","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validate","validate","with_accuracy","width","accuracy","exponent","rate","scale","AllOf","Any","AtomCenteredSamples","CenterSingleNeighborsSpeciesKeys","CenterSpeciesKeys","CenterTwoNeighborsSpeciesKeys","KeysBuilder","OneOf","SamplesBuilder","Single","SpeciesFilter","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cutoff","cutoff","cutoff","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","from","from","from","from","from","gradients_for","gradients_for","init","init","init","init","init","into","into","into","into","into","keys","keys","keys","keys","matches","samples","samples","samples_names","samples_names","self_pairs","self_pairs","self_pairs","species_center","species_neighbor","symmetric","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","0","0","0","NeighborsList","Pair","SimpleSystem","System","UnitCell","__clone_box","__clone_box","__clone_box","__clone_box","a","add_atom","alpha","b","beta","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c","cartesian","cell","cell","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","compute_neighbors","compute_neighbors","cubic","cutoff","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","distance","distances_between_faces","drop","drop","drop","drop","eq","first","fmt","fmt","fmt","fmt","fractional","from","from","from","from","from","gamma","infinite","init","init","init","init","into","into","into","into","is_infinite","matrix","ne","new","new","orthorhombic","pairs","pairs","pairs","pairs_by_center","pairs_containing","pairs_containing","positions","positions","read_from_file","second","shape","size","size","species","species","to_owned","to_owned","to_owned","to_owned","triclinic","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vector","volume","Matrix3","Vector3D","__clone_box","__clone_box","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","determinant","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","drop","drop","eq","eq","fmt","fmt","from","from","from","from","init","init","into","into","inverse","is_zero","is_zero","max","min","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","ne","ne","neg","neg","neg","new","new","norm","norm","norm2","normalized","one","one","partial_cmp","rotation","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","tensorial","to_owned","to_owned","trace","transposed","try_from","try_from","try_into","try_into","type_id","type_id","zero","zero","zero","zero"],"q":["rascaline","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rascaline::Error","","","","","","","","","rascaline::LabelsSelection","","rascaline::calculators","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rascaline::calculators::soaprascaline::calculators::soap::CutoffFunction","rascaline::calculators::soap::RadialBasis","rascaline::calculators::soap::RadialScaling","","","rascaline::labels","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rascaline::labels::SpeciesFilter","","","rascaline::systems","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rascaline::typesd":["Default, use all possible labels","Error used when a memory buffer is too small to fit the …","Parameters specific to a single call to <code>compute</code>","","Error related to reading files with chemfiles","","Errors coming from external callbacks, typically inside …","Error used for failed internal consistency check and …","Got an invalid parameter value in a function","Error while serializing/deserializing data","Rules to select labels (either samples or properties) on …","Use a predefined subset of labels, with different entries …","Error related to saving files in equistore format","A simple implementation of <code>System</code> to use when no other is …","Select a subset of labels, using the same selection …","","Error due to C strings containing non-utf8 data","","","","","","","","","","","","","","","","Compute the descriptor for all the given <code>systems</code> and store …","","Get the set of keys this calculator would produce for the …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","List of strings defining the gradients to compute.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Get the name of this calculator","Create a new calculator with the given <code>name</code> and <code>parameters</code>.","Get the parameters used to create this calculator in a …","Selection of properties to compute for the samples","Selection of samples on which to run the computation","","","","","","","","","","","","","","","","","","This module provides 3D vectors and matrix to be used in …","Copy the data from systems into native <code>SimpleSystem</code>. This …","","","","","","","","","","","","The <code>CalculatorBase</code> trait is the interface shared by all …","Parameters for SOAP power spectrum calculator.","Parameters for the SOAP radial spectrum calculator.","Calculator implementing the Smooth Overlap of Atomic …","Calculator implementing the Radial spectrum representation …","Sorted distances vector representation of an atomic …","The actual calculator used to compute SOAP spherical …","Parameters for spherical expansion calculator.","","Width of the atom-centered gaussian used to create the …","Width of the atom-centered gaussian creating the atomic …","Width of the atom-centered gaussian creating the atomic …","","","Weight of the center atom contribution to the features. If …","Weight of the center atom contribution to the features. If …","Weight of the center atom contribution to the features. If …","","","Get the components this calculator computes for each key.","","Actually run the calculation.","","Spherical cutoff to use for atomic environments","Spherical cutoff to use for atomic environments","Spherical cutoff to use for atomic environments","Cutoff function used to smooth the behavior around the …","cutoff function used to smooth the behavior around the …","cutoff function used to smooth the behavior around the …","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Get the set of keys for this calculator and the given …","","Number of spherical harmonics to use in the expansion","Number of spherical harmonics to use","Number of radial basis function to use in the expansion","Number of radial basis function to use","Number of radial basis function to use","Get the name of this Calculator","","Get the parameters used to create this Calculator as a …","","Get the samples for gradients with respect to positions, …","","Get the properties this calculator computes for each key.","","Get the names used for property labels by this calculator","","Radial basis to use for the radial integral","radial basis to use for the radial integral","radial basis to use for the radial integral","radial scaling can be used to reduce the importance of …","radial scaling can be used to reduce the importance of …","radial scaling can be used to reduce the importance of …","Get the full list of samples this calculator would create …","","Get the names used for sample labels by this calculator","","","","","Can this calculator compute gradients with respect to the …","","","","","","Possible values for the smoothing cutoff function","Use a radial basis similar to Gaussian-Type Orbitals.","Parameters controlling GTO radial basis","","","Computes the G function and its derivative for all …","No radial scaling","Parameters for SOAP power spectrum calculator.","Radial basis that can be used in the spherical expansion","A <code>RadialIntegral</code> computes the radial integral on a given …","Implemented options for radial scaling of the atomic …","Parameters for the SOAP radial spectrum calculator.","Shifted cosine switching function …","Calculator implementing the Smooth Overlap of Atomic …","Calculator implementing the Radial spectrum representation …","The actual calculator used to compute SOAP spherical …","Parameters for spherical expansion calculator.","Compute a full set of spherical harmonics at given …","Array storing data for <code>0 &lt;= l &lt;= l_max</code>, <code>-l &lt;= m &lt;= l</code>. This …","Splined version of the <code>Gto</code> radial basis.","Parameters for computing the radial integral using Hermit …","<code>SplinedRadialIntegral</code> allows to evaluate another radial …","Step function, 1 if <code>r &lt; cutoff</code> and 0 if <code>r &gt;= cutoff</code>","Use the radial scaling functional introduced in …","","","","","","","","","","","","","","","atomic density gaussian width","Width of the atom-centered gaussian used to create the …","Width of the atom-centered gaussian creating the atomic …","Width of the atom-centered gaussian creating the atomic …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Weight of the center atom contribution to the features. If …","Weight of the center atom contribution to the features. If …","Weight of the center atom contribution to the features. If …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compute the radial integral for a single <code>distance</code> between …","","","","","","","Evaluate all spherical harmonics for the given <code>direction</code>, …","Evaluate the cutoff function at the distance <code>r</code> for the …","Evaluate the radial scaling function at the distance <code>r</code>","cutoff radius","cutoff radius, this is also the maximal value that can be …","Spherical cutoff to use for atomic environments","Spherical cutoff to use for atomic environments","Spherical cutoff to use for atomic environments","Cutoff function used to smooth the behavior around the …","cutoff function used to smooth the behavior around the …","cutoff function used to smooth the behavior around the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Evaluate the derivative of the cutoff function at the …","Evaluate the derivative of the radial scaling function at …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Number of angular components","Number of angular components","Number of spherical harmonics to use in the expansion","Number of spherical harmonics to use","Number of radial components","Number of radial components","Number of radial basis function to use in the expansion","Number of radial basis function to use","Number of radial basis function to use","","","","Create a new <code>SphericalExpansion</code> calculator with the given …","","","","","Create a new <code>SphericalHarmonicsArray</code> with the given …","Build a new <code>SphericalHarmonics</code> calculator with the given …","","","","","","","","","","","","","Radial basis to use for the radial integral","radial basis to use for the radial integral","radial basis to use for the radial integral","radial scaling can be used to reduce the importance of …","radial scaling can be used to reduce the importance of …","radial scaling can be used to reduce the importance of …","","","","","","","","","","","","","","","","","","","Get the slice of the full array containing values for a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new <code>SplinedRadialIntegral</code> taking values from the …","","","","","","All of the given atoms species must be present. This can …","Any atomic species is fine","<code>SampleBuilder</code> for atom-centered representation. This will …","Compute a set of keys with two variables: the central atom …","Compute a set of keys with a single variable, the central …","Compute a set of keys with three variables: the central …","Common interface to create a set of equistore’s <code>TensorMap</code>…","Any of the given atomic species is fine","Abstraction over the different kinds of samples used in …","Only the given atomic species should match","Atomic species filters to be used when building samples …","","","","","","","","","","","spherical cutoff radius used to construct the …","Spherical cutoff to use when searching for neighbors …","Spherical cutoff to use when searching for neighbors …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a set of <code>Labels</code> containing the gradient samples …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Compute the keys corresponding to these systems","","","","Check if a given species matches the filter","Create <code>Labels</code> containing all the samples corresponding to …","","Get the names used by the samples","","Should the central atom be considered it’s own neighbor?","Should we consider an atom to be it’s own neighbor or …","Should we consider an atom to be it’s own neighbor or …","Filter for the central atom species","Filter for the neighbor atom species","Are neighbor atoms keys symmetric with respect to exchange …","","","","","","","","","","","","","","","","","","","A neighbor list implementation usable with any system","Pair of atoms coming from a neighbor list.","A simple implementation of <code>System</code> to use when no other is …","A <code>System</code> deals with the storage of atoms and related …","An <code>UnitCell</code> defines the system physical boundaries.","","","","","Get the first length of the cell (i.e. the norm of the …","Add an atom with the given species and position to this …","Get the first angle of the cell","Get the second length of the cell (i.e. the norm of the …","Get the second angle of the cell","","","","","","","","","Get the third length of the cell (i.e. the norm of the …","Get the Cartesian representation of the <code>fractional</code> vector …","Get the unit cell for this system","","","","","","","","","","Compute the neighbor list according to the given cutoff, …","","Create a cubic unit cell, with side lengths …","the cutoff used to create this neighbor list","","","","","","","","","distance between the two atoms","Get the distances between faces of the unit cell","","","","","","index of the first atom in the pair","","","","","Get the fractional representation of the <code>vector</code> in this …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the third angle of the cell","Create an infinite unit cell","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if this unit cell is infinite, <em>i.e.</em> if it does not …","Get the matricial representation of the unit cell","","","Create a new empty system with the given unit cell","Create an orthorhombic unit cell, with side lengths <code>a, b, c</code>…","Get the list of pairs in this system. This list of pair …","","all pairs in the system","all pairs in the system, classified by associated center","Get the list of pairs in this system which include the …","","Get the positions for all atoms in this system. The …","","Read all structures in the file at the given <code>path</code> using …","index of the second atom in the pair","Get the cell shape","Get the number of atoms in this system","","Get the atomic species for all atoms in this system. The …","","","","","","Create a triclinic unit cell, with side lengths <code>a, b, c</code> …","","","","","","","","","","","","","","vector from the first atom to the second atom, wrapped …","Get the volume of the cell","A 3x3 square matrix type.","A 3-dimensional vector type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the determinant of a matrix","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Computes the inverse of a matrix","","","Get the maximal value in this vector, using <code>std::f64::max</code> …","Get the minimal value in this vector, using <code>std::f64::min</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new <code>Vector3D</code> with components <code>x</code>, <code>y</code>, <code>z</code>","Create a new <code>Matrix3</code> specifying all its components","Return the euclidean norm of a <code>Vector3D</code>","Compute the (Frobenius) norm of the matrix","Return the squared euclidean norm of a <code>Vector3D</code>","Normalize a <code>Vector3D</code>.","Create a new <code>Vector3D</code> with components all components set …","Create an identity matrix","","Returns rotation matrix given a rotation angle and an axis.","","","","","","","","","","","","","","","","","","","","","","","","","","Tensorial product between vectors. The tensorial product …","","","Compute the trace of the matrix","Transpose this matrix into a new matrix","","","","","","","Create a new <code>Vector3D</code> with components <code>0</code>, <code>0</code>, <code>0</code>","","Create a new <code>Matrix3</code> with components set to <code>0</code>",""],"i":[1,2,0,0,2,0,2,2,2,2,0,1,2,0,1,0,2,1,3,4,2,1,3,4,2,1,3,0,1,3,1,3,4,3,4,4,2,1,3,4,2,1,3,4,2,1,3,2,2,1,3,4,4,2,2,2,2,2,2,1,3,3,4,2,1,3,4,2,1,3,0,4,4,4,3,3,2,0,1,3,2,4,2,1,3,4,2,1,3,4,2,1,3,0,3,5,6,7,8,9,10,11,12,12,13,14,0,0,0,0,0,0,0,0,15,16,17,18,15,15,16,17,18,15,15,19,15,19,15,16,17,18,16,17,18,15,15,15,15,15,15,15,15,15,19,15,16,17,16,17,18,19,15,19,15,19,15,19,15,19,15,16,17,18,16,17,18,19,15,19,15,15,15,0,19,15,15,15,15,15,0,20,0,0,0,0,21,0,0,0,0,0,22,0,0,0,0,0,0,20,0,0,22,21,23,24,25,26,27,28,29,22,21,20,16,17,18,24,25,16,17,18,30,31,32,33,23,24,25,26,27,28,29,22,21,20,16,17,18,30,31,32,33,23,24,25,26,27,28,29,22,21,20,16,17,18,16,17,18,23,24,25,26,27,28,29,22,21,20,16,17,18,23,24,25,26,27,28,29,22,21,20,16,17,18,31,32,33,34,30,31,32,33,23,26,29,22,21,25,27,16,17,18,16,17,18,21,30,31,32,33,23,24,25,26,27,28,29,22,21,20,16,17,18,30,31,32,33,23,24,25,26,27,28,29,22,21,20,16,17,18,22,21,22,21,20,16,17,18,30,31,32,33,23,24,25,26,27,28,29,22,21,20,16,17,18,31,32,33,23,24,25,26,27,28,29,22,21,20,16,17,18,30,31,32,33,23,24,25,26,27,28,29,22,21,20,16,17,18,24,28,28,30,31,32,33,23,24,25,26,27,28,29,22,21,20,16,17,18,30,31,32,33,23,24,25,26,27,28,29,22,21,20,16,17,18,22,21,20,16,17,18,31,32,33,25,27,16,17,25,27,16,17,18,31,32,33,31,32,33,23,26,28,29,31,32,33,31,32,33,31,32,33,31,32,33,16,17,18,16,17,18,31,32,33,31,32,33,22,21,20,16,17,18,22,21,20,16,17,18,28,31,32,33,23,24,25,26,27,28,29,22,21,20,16,17,18,30,31,32,33,23,24,25,26,27,28,29,22,21,20,16,17,18,30,31,32,33,23,24,25,26,27,28,29,22,21,20,16,17,18,30,31,32,33,23,24,25,26,27,28,29,22,21,20,16,17,18,22,21,30,35,36,37,37,37,38,38,0,0,0,0,0,38,0,38,0,38,39,40,41,42,38,39,40,41,42,39,41,42,38,39,40,41,42,38,39,40,41,42,38,39,40,41,42,38,39,40,41,42,43,39,38,39,40,41,42,38,39,40,41,42,44,40,41,42,38,43,39,43,39,39,41,42,39,39,42,38,39,40,41,42,38,39,40,41,42,38,39,40,41,42,45,46,47,0,0,0,0,0,48,49,50,51,48,50,48,48,48,48,49,50,51,48,49,50,51,48,48,52,50,48,49,50,51,48,49,50,51,52,50,48,49,48,49,50,51,48,49,50,51,51,48,48,49,50,51,48,51,48,49,50,51,48,48,48,49,50,51,48,48,48,49,50,51,48,49,50,51,48,48,48,49,50,48,52,50,49,49,52,50,52,50,0,51,48,52,50,52,50,48,49,50,51,48,48,49,50,50,51,48,49,50,51,48,49,50,51,51,48,0,0,53,54,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,53,53,53,54,54,54,53,53,53,53,53,53,53,53,53,53,54,53,54,53,54,53,54,53,53,53,54,54,53,53,54,54,54,53,53,53,54,54,54,53,53,53,54,54,54,53,54,53,54,53,54,53,53,54,54,53,54,53,54,54,53,54,53,53,53,53,53,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,53,53,53,54,54,54,54,54,54,53,54,53,53,53,53,54,53,54,53,53,54,54,53,54,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,53,53,53,54,54,54,54,53,53,54,54,54,53,54,53,54,53,54,53,53,54,54],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["private",3]]],[[["",0],["private",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["labelsselection",4]],["labelsselection",4]],[[["calculationoptions",3]],["calculationoptions",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["calculator",3],["calculationoptions",3]],["result",4,[["tensormap",3],["error",4]]]],[[],["calculationoptions",3]],[[["calculator",3]],["result",4,[["labels",3],["error",4]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["error",4],["formatter",3]],["result",6]],[[["error",4],["formatter",3]],["result",6]],[[["labelsselection",4],["formatter",3]],["result",6]],[[["calculationoptions",3],["formatter",3]],["result",6]],[[["box",3,[["calculatorbase",8]]]],["calculator",3]],[[]],[[["error",3]],["error",4]],[[]],[[["utf8error",3]],["error",4]],[[["box",3,[["any",8]]]],["error",4]],[[["error",4]],["error",4]],[[["error",3]],["error",4]],[[]],[[]],null,[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],null,[[["calculator",3]],["string",3]],[[["str",0],["string",3]],["result",4,[["calculator",3],["error",4]]]],[[["calculator",3]],["str",0]],null,null,[[["error",4]],["option",4,[["error",8]]]],null,[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["private",3]]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,null,null,[[["sorteddistances",3]],["sorteddistances",3]],[[["",0],["",0]]],[[["",0],["labels",3]],["vec",3,[["vec",3,[["arc",3,[["labels",3]]]]]]]],[[["sorteddistances",3],["labels",3]],["vec",3,[["vec",3,[["arc",3,[["labels",3]]]]]]]],[[["",0],["tensormap",3]],["result",4,[["error",4]]]],[[["sorteddistances",3],["tensormap",3]],["result",4,[["error",4]]]],null,null,null,null,null,null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4,[["sorteddistances",3]]]],[[["usize",0]]],[[["sorteddistances",3],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[["schemagenerator",3]],["schema",4]],[[["",0]],["result",4,[["labels",3],["error",4]]]],[[["sorteddistances",3]],["result",4,[["labels",3],["error",4]]]],null,null,null,null,null,[[["",0]],["string",3]],[[["sorteddistances",3]],["string",3]],[[["",0]],["string",3]],[[["sorteddistances",3]],["string",3]],[[["",0],["labels",3]],["result",4,[["vec",3,[["arc",3,[["labels",3]]]]],["error",4]]]],[[["sorteddistances",3],["labels",3]],["result",4,[["vec",3,[["arc",3,[["labels",3]]]]],["error",4]]]],[[["",0],["labels",3]],["vec",3,[["arc",3,[["labels",3]]]]]],[[["sorteddistances",3],["labels",3]],["vec",3,[["arc",3,[["labels",3]]]]]],[[["",0]],["vec",3,[["str",0]]]],[[["sorteddistances",3]],["vec",3,[["str",0]]]],null,null,null,null,null,null,[[["",0],["labels",3]],["result",4,[["vec",3,[["arc",3,[["labels",3]]]]],["error",4]]]],[[["sorteddistances",3],["labels",3]],["result",4,[["vec",3,[["arc",3,[["labels",3]]]]],["error",4]]]],[[["",0]],["vec",3,[["str",0]]]],[[["sorteddistances",3]],["vec",3,[["str",0]]]],[[],["string",3]],[[["sorteddistances",3]],["result",4]],null,[[["",0],["str",0]],["bool",0]],[[["sorteddistances",3],["str",0]],["bool",0]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["private",3]]],[[["",0],["private",3]]],[[["",0],["private",3]]],[[["",0],["private",3]]],[[["",0],["private",3]]],[[["",0],["private",3]]],[[["",0],["private",3]]],[[["",0],["private",3]]],[[["",0],["private",3]]],[[["",0],["private",3]]],[[["",0],["private",3]]],[[["",0],["private",3]]],[[["",0],["private",3]]],null,null,null,null,nullnull,null,null,[[["hypergeometricsphericalexpansion",3]],["hypergeometricsphericalexpansion",3]],[[["hypergeometricparameters",3]],["hypergeometricparameters",3]],[[["gtoparameters",3]],["gtoparameters",3]],[[["gtoradialintegral",3]],["gtoradialintegral",3]],[[["splinedriparameters",3]],["splinedriparameters",3]],[[["sphericalharmonicsarray",3]],["sphericalharmonicsarray",3]],[[["sphericalharmonics",3]],["sphericalharmonics",3]],[[["cutofffunction",4]],["cutofffunction",4]],[[["radialscaling",4]],["radialscaling",4]],[[["radialbasis",4]],["radialbasis",4]],[[["sphericalexpansionparameters",3]],["sphericalexpansionparameters",3]],[[["powerspectrumparameters",3]],["powerspectrumparameters",3]],[[["radialspectrumparameters",3]],["radialspectrumparameters",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["sphericalexpansion",3],["labels",3]],["vec",3,[["vec",3,[["arc",3,[["labels",3]]]]]]]],[[["soappowerspectrum",3],["labels",3]],["vec",3,[["vec",3,[["arc",3,[["labels",3]]]]]]]],[[["soapradialspectrum",3],["labels",3]],["vec",3,[["vec",3,[["arc",3,[["labels",3]]]]]]]],[[["",0],["f64",0],["arrayviewmut2",6,[["f64",0]]],["option",4,[["arrayviewmut2",6,[["f64",0]]]]]]],[[["splinedradialintegral",3],["f64",0],["arrayviewmut2",6,[["f64",0]]],["option",4,[["arrayviewmut2",6,[["f64",0]]]]]]],[[["sphericalexpansion",3],["tensormap",3]],["result",4,[["error",4]]]],[[["soappowerspectrum",3],["tensormap",3]],["result",4,[["error",4]]]],[[["soapradialspectrum",3],["tensormap",3]],["result",4,[["error",4]]]],[[["hypergeometricsphericalexpansion",3],["f64",0],["hypergeometricparameters",3],["arrayviewmut2",6,[["f64",0]]],["option",4,[["arrayviewmut2",6,[["f64",0]]]]]]],[[["gtoradialintegral",3],["f64",0],["arrayviewmut2",6,[["f64",0]]],["option",4,[["arrayviewmut2",6,[["f64",0]]]]]]],[[["sphericalharmonics",3],["vector3d",3],["sphericalharmonicsarray",3],["option",4]]],[[["cutofffunction",4],["f64",0],["f64",0]],["f64",0]],[[["radialscaling",4],["f64",0]],["f64",0]],null,null,null,null,null,null,null,null,[[],["radialscaling",4]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["cutofffunction",4],["f64",0],["f64",0]],["f64",0]],[[["radialscaling",4],["f64",0]],["f64",0]],[[],["result",4,[["cutofffunction",4]]]],[[],["result",4,[["radialscaling",4]]]],[[],["result",4,[["radialbasis",4]]]],[[],["result",4,[["sphericalexpansionparameters",3]]]],[[],["result",4,[["powerspectrumparameters",3]]]],[[],["result",4,[["radialspectrumparameters",3]]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["sphericalexpansion",3],["formatter",3]],["result",6]],[[["soappowerspectrum",3],["formatter",3]],["result",6]],[[["soapradialspectrum",3],["formatter",3]],["result",6]],[[["hypergeometricsphericalexpansion",3],["formatter",3]],["result",6]],[[["hypergeometricparameters",3],["formatter",3]],["result",6]],[[["gtoparameters",3],["formatter",3]],["result",6]],[[["gtoradialintegral",3],["formatter",3]],["result",6]],[[["splinedriparameters",3],["formatter",3]],["result",6]],[[["sphericalharmonicsarray",3],["formatter",3]],["result",6]],[[["sphericalharmonics",3],["formatter",3]],["result",6]],[[["cutofffunction",4],["formatter",3]],["result",6]],[[["radialscaling",4],["formatter",3]],["result",6]],[[["radialbasis",4],["formatter",3]],["result",6]],[[["sphericalexpansionparameters",3],["formatter",3]],["result",6]],[[["powerspectrumparameters",3],["formatter",3]],["result",6]],[[["radialspectrumparameters",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["sphericalharmonicsarray",3]],["f64",0]],[[["sphericalharmonicsarray",3]],["f64",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["schemagenerator",3]],["schema",4]],[[["schemagenerator",3]],["schema",4]],[[["schemagenerator",3]],["schema",4]],[[["schemagenerator",3]],["schema",4]],[[["schemagenerator",3]],["schema",4]],[[["schemagenerator",3]],["schema",4]],[[["sphericalexpansion",3]],["result",4,[["labels",3],["error",4]]]],[[["soappowerspectrum",3]],["result",4,[["labels",3],["error",4]]]],[[["soapradialspectrum",3]],["result",4,[["labels",3],["error",4]]]],null,null,null,null,null,null,null,null,null,[[["sphericalexpansion",3]],["string",3]],[[["soappowerspectrum",3]],["string",3]],[[["soapradialspectrum",3]],["string",3]],[[["sphericalexpansionparameters",3]],["result",4,[["sphericalexpansion",3],["error",4]]]],[[["powerspectrumparameters",3]],["result",4,[["soappowerspectrum",3],["error",4]]]],[[["radialspectrumparameters",3]],["result",4,[["soapradialspectrum",3],["error",4]]]],[[["usize",0],["usize",0]],["hypergeometricsphericalexpansion",3]],[[["gtoparameters",3]],["result",4,[["gtoradialintegral",3],["error",4]]]],[[["usize",0]],["sphericalharmonicsarray",3]],[[["usize",0]],["sphericalharmonics",3]],[[["sphericalexpansion",3]],["string",3]],[[["soappowerspectrum",3]],["string",3]],[[["soapradialspectrum",3]],["string",3]],[[["sphericalexpansion",3],["labels",3]],["result",4,[["vec",3,[["arc",3,[["labels",3]]]]],["error",4]]]],[[["soappowerspectrum",3],["labels",3]],["result",4,[["vec",3,[["arc",3,[["labels",3]]]]],["error",4]]]],[[["soapradialspectrum",3],["labels",3]],["result",4,[["vec",3,[["arc",3,[["labels",3]]]]],["error",4]]]],[[["sphericalexpansion",3],["labels",3]],["vec",3,[["arc",3,[["labels",3]]]]]],[[["soappowerspectrum",3],["labels",3]],["vec",3,[["arc",3,[["labels",3]]]]]],[[["soapradialspectrum",3],["labels",3]],["vec",3,[["arc",3,[["labels",3]]]]]],[[["sphericalexpansion",3]],["vec",3,[["str",0]]]],[[["soappowerspectrum",3]],["vec",3,[["str",0]]]],[[["soapradialspectrum",3]],["vec",3,[["str",0]]]],null,null,null,null,null,null,[[["sphericalexpansion",3],["labels",3]],["result",4,[["vec",3,[["arc",3,[["labels",3]]]]],["error",4]]]],[[["soappowerspectrum",3],["labels",3]],["result",4,[["vec",3,[["arc",3,[["labels",3]]]]],["error",4]]]],[[["soapradialspectrum",3],["labels",3]],["result",4,[["vec",3,[["arc",3,[["labels",3]]]]],["error",4]]]],[[["sphericalexpansion",3]],["vec",3,[["str",0]]]],[[["soappowerspectrum",3]],["vec",3,[["str",0]]]],[[["soapradialspectrum",3]],["vec",3,[["str",0]]]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[["cutofffunction",4]],["result",4]],[[["radialscaling",4]],["result",4]],[[["radialbasis",4]],["result",4]],[[["sphericalexpansionparameters",3]],["result",4]],[[["powerspectrumparameters",3]],["result",4]],[[["radialspectrumparameters",3]],["result",4]],[[["sphericalharmonicsarray",3],["isize",0]],["arrayview1",6,[["f64",0]]]],[[["sphericalexpansion",3],["str",0]],["bool",0]],[[["soappowerspectrum",3],["str",0]],["bool",0]],[[["soapradialspectrum",3],["str",0]],["bool",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["cutofffunction",4]],["result",4,[["error",4]]]],[[["radialscaling",4]],["result",4,[["error",4]]]],[[["splinedriparameters",3],["f64",0],["radialintegral",8]],["result",4,[["splinedradialintegral",3],["error",4]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[]],[[]],[[]],[[]],[[]],[[["",0],["labels",3]],["result",4,[["arc",3,[["labels",3]]],["error",4]]]],[[["atomcenteredsamples",3],["labels",3]],["result",4,[["arc",3,[["labels",3]]],["error",4]]]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["result",4,[["labels",3],["error",4]]]],[[["centerspecieskeys",3]],["result",4,[["labels",3],["error",4]]]],[[["centersingleneighborsspecieskeys",3]],["result",4,[["labels",3],["error",4]]]],[[["centertwoneighborsspecieskeys",3]],["result",4,[["labels",3],["error",4]]]],[[["speciesfilter",4],["i32",0]],["bool",0]],[[["",0]],["result",4,[["arc",3,[["labels",3]]],["error",4]]]],[[["atomcenteredsamples",3]],["result",4,[["arc",3,[["labels",3]]],["error",4]]]],[[],["vec",3,[["str",0]]]],[[],["vec",3,[["str",0]]]],null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,[[["",0],["private",3]]],[[["",0],["private",3]]],[[["",0],["private",3]]],[[["",0],["private",3]]],[[["unitcell",3]],["f64",0]],[[["simplesystem",3],["i32",0],["vector3d",3]]],[[["unitcell",3]],["f64",0]],[[["unitcell",3]],["f64",0]],[[["unitcell",3]],["f64",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["unitcell",3]],["f64",0]],[[["unitcell",3],["vector3d",3]],["vector3d",3]],[[["",0]],["result",4,[["unitcell",3],["error",4]]]],[[["simplesystem",3]],["result",4,[["unitcell",3],["error",4]]]],[[["unitcell",3]],["unitcell",3]],[[["neighborslist",3]],["neighborslist",3]],[[["simplesystem",3]],["simplesystem",3]],[[["pair",3]],["pair",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["f64",0]],["result",4,[["error",4]]]],[[["simplesystem",3],["f64",0]],["result",4,[["error",4]]]],[[["f64",0]],["unitcell",3]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],null,[[["unitcell",3]],["vector3d",3]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["unitcell",3],["unitcell",3]],["bool",0]],null,[[["unitcell",3],["formatter",3]],["result",6]],[[["neighborslist",3],["formatter",3]],["result",6]],[[["simplesystem",3],["formatter",3]],["result",6]],[[["pair",3],["formatter",3]],["result",6]],[[["unitcell",3],["vector3d",3]],["vector3d",3]],[[["matrix3",3]],["unitcell",3]],[[]],[[]],[[]],[[]],[[["unitcell",3]],["f64",0]],[[],["unitcell",3]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[["unitcell",3]],["bool",0]],[[["unitcell",3]],["matrix3",3]],[[["unitcell",3],["unitcell",3]],["bool",0]],[[["unitcell",3],["f64",0]],["neighborslist",3]],[[["unitcell",3]],["simplesystem",3]],[[["f64",0],["f64",0],["f64",0]],["unitcell",3]],[[["",0]],["result",4,[["error",4]]]],[[["simplesystem",3]],["result",4,[["error",4]]]],null,null,[[["",0],["usize",0]],["result",4,[["error",4]]]],[[["simplesystem",3],["usize",0]],["result",4,[["error",4]]]],[[["",0]],["result",4,[["error",4]]]],[[["simplesystem",3]],["result",4,[["error",4]]]],[[["asref",8,[["path",3]]]],["result",4,[["vec",3,[["simplesystem",3]]],["error",4]]]],null,[[["unitcell",3]],["cellshape",4]],[[["",0]],["result",4,[["usize",0],["error",4]]]],[[["simplesystem",3]],["result",4,[["usize",0],["error",4]]]],[[["",0]],["result",4,[["error",4]]]],[[["simplesystem",3]],["result",4,[["error",4]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["f64",0],["f64",0],["f64",0],["f64",0],["f64",0],["f64",0]],["unitcell",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["system",8]],["result",4,[["simplesystem",3],["error",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["unitcell",3]],["f64",0]],null,null,[[["",0],["private",3]]],[[["",0],["private",3]]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],[[["matrix3",3],["matrix3",3]],["matrix3",3]],[[["matrix3",3],["matrix3",3]],["matrix3",3]],[[["matrix3",3],["matrix3",3]],["matrix3",3]],[[["matrix3",3],["matrix3",3]],["matrix3",3]],[[["matrix3",3],["matrix3",3]],["matrix3",3]],[[["matrix3",3],["matrix3",3]],["matrix3",3]],[[["matrix3",3],["matrix3",3]],["matrix3",3]],[[["matrix3",3],["matrix3",3]],["matrix3",3]],[[["matrix3",3],["matrix3",3]],["matrix3",3]],[[["vector3d",3],["vector3d",3]]],[[["vector3d",3],["vector3d",3]]],[[["vector3d",3],["vector3d",3]]],[[["matrix3",3],["matrix3",3]]],[[["matrix3",3],["matrix3",3]]],[[["matrix3",3],["matrix3",3]]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["vector3d",3]],["vector3d",3]],[[["matrix3",3]],["matrix3",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["vector3d",3]],[[["vector3d",3]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["matrix3",3]]],[[["vector3d",3]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["matrix3",3]]],[[["matrix3",3]],["f64",0]],[[["vector3d",3],["f64",0]],["vector3d",3]],[[["vector3d",3],["f64",0]],["vector3d",3]],[[["vector3d",3],["f64",0]],["vector3d",3]],[[["matrix3",3],["f64",0]],["matrix3",3]],[[["matrix3",3],["f64",0]],["matrix3",3]],[[["matrix3",3],["f64",0]],["matrix3",3]],[[["vector3d",3],["f64",0]]],[[["vector3d",3],["f64",0]]],[[["vector3d",3],["f64",0]]],[[["matrix3",3],["f64",0]]],[[["matrix3",3],["f64",0]]],[[["matrix3",3],["f64",0]]],[[["usize",0]]],[[["usize",0]]],[[["vector3d",3],["vector3d",3]],["bool",0]],[[["matrix3",3],["matrix3",3]],["bool",0]],[[["vector3d",3],["formatter",3]],["result",6]],[[["matrix3",3],["formatter",3]],["result",6]],[[],["vector3d",3]],[[]],[[]],[[],["matrix3",3]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["matrix3",3]],["matrix3",3]],[[["vector3d",3]],["bool",0]],[[["matrix3",3]],["bool",0]],[[["vector3d",3]],["f64",0]],[[["vector3d",3]],["f64",0]],[[["vector3d",3],["vector3d",3]],["f64",0]],[[["vector3d",3],["vector3d",3]],["f64",0]],[[["vector3d",3],["vector3d",3]],["f64",0]],[[["vector3d",3],["vector3d",3]],["f64",0]],[[["vector3d",3],["f64",0]],["vector3d",3]],[[["vector3d",3],["f64",0]],["vector3d",3]],[[["vector3d",3],["f64",0]],["vector3d",3]],[[["vector3d",3],["vector3d",3]],["f64",0]],[[["vector3d",3],["vector3d",3]],["f64",0]],[[["vector3d",3],["vector3d",3]],["f64",0]],[[["vector3d",3],["vector3d",3]],["f64",0]],[[["vector3d",3],["vector3d",3]],["f64",0]],[[["matrix3",3],["matrix3",3]],["matrix3",3]],[[["matrix3",3],["vector3d",3]],["vector3d",3]],[[["matrix3",3],["matrix3",3]],["matrix3",3]],[[["matrix3",3],["matrix3",3]],["matrix3",3]],[[["matrix3",3],["vector3d",3]],["vector3d",3]],[[["matrix3",3],["matrix3",3]],["matrix3",3]],[[["matrix3",3],["matrix3",3]],["matrix3",3]],[[["matrix3",3],["vector3d",3]],["vector3d",3]],[[["matrix3",3],["matrix3",3]],["matrix3",3]],[[["matrix3",3],["vector3d",3]],["vector3d",3]],[[["matrix3",3],["vector3d",3]],["vector3d",3]],[[["matrix3",3],["matrix3",3]],["matrix3",3]],[[["matrix3",3],["vector3d",3]],["vector3d",3]],[[["matrix3",3],["vector3d",3]],["vector3d",3]],[[["matrix3",3],["f64",0]],["matrix3",3]],[[["matrix3",3],["vector3d",3]],["vector3d",3]],[[["matrix3",3],["matrix3",3]],["matrix3",3]],[[["matrix3",3],["vector3d",3]],["vector3d",3]],[[["matrix3",3],["f64",0]],["matrix3",3]],[[["matrix3",3],["matrix3",3]],["matrix3",3]],[[["matrix3",3],["f64",0]],["matrix3",3]],[[["vector3d",3],["f64",0]]],[[["vector3d",3],["f64",0]]],[[["vector3d",3],["f64",0]]],[[["matrix3",3],["matrix3",3]]],[[["matrix3",3],["matrix3",3]]],[[["matrix3",3],["f64",0]]],[[["matrix3",3],["f64",0]]],[[["matrix3",3],["f64",0]]],[[["matrix3",3],["matrix3",3]]],[[["vector3d",3],["vector3d",3]],["bool",0]],[[["matrix3",3],["matrix3",3]],["bool",0]],[[["vector3d",3]],["vector3d",3]],[[["vector3d",3]],["vector3d",3]],[[["vector3d",3]],["vector3d",3]],[[["f64",0],["f64",0],["f64",0]],["vector3d",3]],[[],["matrix3",3]],[[["vector3d",3]],["f64",0]],[[["matrix3",3]],["f64",0]],[[["vector3d",3]],["f64",0]],[[["vector3d",3]],["vector3d",3]],[[],["matrix3",3]],[[],["matrix3",3]],[[["vector3d",3],["vector3d",3]],["option",4,[["ordering",4]]]],[[["vector3d",3],["f64",0]],["matrix3",3]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],[[["vector3d",3],["vector3d",3]],["vector3d",3]],[[["matrix3",3],["matrix3",3]],["matrix3",3]],[[["matrix3",3],["matrix3",3]],["matrix3",3]],[[["matrix3",3],["matrix3",3]],["matrix3",3]],[[["matrix3",3],["matrix3",3]],["matrix3",3]],[[["matrix3",3],["matrix3",3]],["matrix3",3]],[[["matrix3",3],["matrix3",3]],["matrix3",3]],[[["matrix3",3],["matrix3",3]],["matrix3",3]],[[["matrix3",3],["matrix3",3]],["matrix3",3]],[[["matrix3",3],["matrix3",3]],["matrix3",3]],[[["vector3d",3],["vector3d",3]]],[[["vector3d",3],["vector3d",3]]],[[["vector3d",3],["vector3d",3]]],[[["matrix3",3],["matrix3",3]]],[[["matrix3",3],["matrix3",3]]],[[["matrix3",3],["matrix3",3]]],[[],["matrix3",3]],[[["vector3d",3],["vector3d",3]],["matrix3",3]],[[["",0]]],[[["",0]]],[[["matrix3",3]],["f64",0]],[[["matrix3",3]],["matrix3",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["vector3d",3]],[[],["vector3d",3]],[[],["matrix3",3]],[[],["matrix3",3]]],"p":[[4,"LabelsSelection"],[4,"Error"],[3,"CalculationOptions"],[3,"Calculator"],[13,"InvalidParameter"],[13,"Json"],[13,"Utf8"],[13,"Chemfiles"],[13,"Serialization"],[13,"BufferSize"],[13,"Internal"],[13,"External"],[13,"Subset"],[13,"Predefined"],[3,"SortedDistances"],[3,"SphericalExpansionParameters"],[3,"PowerSpectrumParameters"],[3,"RadialSpectrumParameters"],[8,"CalculatorBase"],[4,"RadialBasis"],[4,"RadialScaling"],[4,"CutoffFunction"],[3,"HyperGeometricSphericalExpansion"],[3,"HyperGeometricParameters"],[3,"GtoParameters"],[3,"GtoRadialIntegral"],[3,"SplinedRIParameters"],[3,"SphericalHarmonicsArray"],[3,"SphericalHarmonics"],[3,"SplinedRadialIntegral"],[3,"SphericalExpansion"],[3,"SoapPowerSpectrum"],[3,"SoapRadialSpectrum"],[8,"RadialIntegral"],[13,"ShiftedCosine"],[13,"SplinedGto"],[13,"Willatt2018"],[4,"SpeciesFilter"],[3,"AtomCenteredSamples"],[3,"CenterSpeciesKeys"],[3,"CenterSingleNeighborsSpeciesKeys"],[3,"CenterTwoNeighborsSpeciesKeys"],[8,"SamplesBuilder"],[8,"KeysBuilder"],[13,"Single"],[13,"OneOf"],[13,"AllOf"],[3,"UnitCell"],[3,"NeighborsList"],[3,"SimpleSystem"],[3,"Pair"],[8,"System"],[3,"Vector3D"],[3,"Matrix3"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
